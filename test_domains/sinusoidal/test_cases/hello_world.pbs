#!/usr/bin/env bash
# Job will use 1 node, 28 cores, and 168gb of memory total.
#PBS -l select=1:ncpus=28:mem=168gb:pcmem=6gb
#PBS -q standard
#PBS -N hello_world_pbs
#PBS -W group_list=mstrout
#PBS -l place=pack:exclhost
#PBS -l walltime=0:05:00
#PBS -j oe

#set number of cells
NX=100
NY=200
NZ=10

# Run for 24 hours
NT=24

# 8 processes, making 4 partitions in the X dimension, and 2 in the Y.
NP=4
NQ=2
NR=1

size_string=${NX}x${NY}x${NZ}-${NT}_${NP}-${NQ}-${NR}
test_name=hellow_world_pbs_${size_string}

#▉    ▉  ▉▉▉▉▉▉   ▉   ▉           ▉   ▉   ▉▉▉▉   ▉    ▉      ▉▉▉▉▉▉▉
#▉    ▉  ▉         ▉ ▉             ▉ ▉   ▉    ▉  ▉    ▉       ▉▉▉▉▉
#▉▉▉▉▉▉  ▉▉▉▉▉      ▉               ▉    ▉    ▉  ▉    ▉        ▉▉▉
#▉    ▉  ▉          ▉               ▉    ▉    ▉  ▉    ▉         ▉
#▉    ▉  ▉          ▉   ▉▉▉         ▉    ▉    ▉  ▉    ▉
#▉    ▉  ▉▉▉▉▉▉     ▉   ▉▉▉         ▉     ▉▉▉▉    ▉▉▉▉          ▉
#                        ▉
#                       ▉
#
# You need change the below variables

# Setting the Path to Script Directory
#
# path_to_script_directory is the absolute path to
# the script directory containing run.sh
# THIS IS MANDATORY
# Change the below string to the correct path.
#                    └──────────────────────┐
#                        ┌──────────────────┴────────────────────────┐
path_to_script_directory="PUT THE PROPER SCRIPTS DIRECTORY PATH HERE"


# Setting ParFlow installation
#
# ParFlow installation can be set in either one of two ways.
# First: PARFLOW_DIR
# PARFLOW_DIR points to the installation of ParFlow, and contains the
# bin, lib, and include directories.
# Change the below string to the correct path.
#                    └─────────┐
#           ┌──────────────────┴──────────────────┐
PARFLOW_DIR="PUT THE PROPER PARFLOW_DIR PATH HERE"

# Second: module_array
# module_array lists the modules to be loaded in order.
# Spefify the modules that need to be loaded, in the order in which they need to be loaded,
# separated by SPACES into the empty array below, between the parenthesis
#                ┌────────────────────┘
#             ┌──▼──┐
modules_array=(     )
# Valid (as of 4.22.202) example on Ocelote:
# modules_array=(unsupported mstrout/parflow/parflow-master-9c0b0f_amps-mpi)

# And you're done!
# You can set the debug variable to true and run with or without PBS to
# test these setupt without actually running ParFlow
enable_debug=false

################################################################################
# Nothing below here should be changed unless you know what you're doing.
################################################################################

# Check path_to_script_directory
if [[ ${path_to_script_directory} == "PUT THE PROPER SCRIPTS DIRECTORY PATH HERE" ]]
then
  # Script being executed by PBS, no recourse for finding path_to_script_directory
  if [[ "$0" =~ "/pbs" ]]
  then
    echo "path_to_script_directory HAS NOT BEEN SET PROPERLY."
    echo "path_to_script_directory=${path_to_script_directory}"
    echo "YOU DID NOT FOLLOW THE README OR THE INSTRUCTIONS LISTED HERE."
    echo "SCRIPT IS BEING RUN WITH PBS, AND CANNOT AUTOMAGICALLY DETECT"
    echo "THE PATH TO THE RUN SCRIPT FOR YOU."
    exit

  # Script probably not being executed by PBS.
  # Warn user, but attempt to find path_to_script_directory
  else
    echo "path_to_run_script has not been set properly."
    echo "Currently: path_to_script_directory=${path_to_script_directory}"
    echo "Please read the instructions available both here and in the readme."
    echo "This script will attempt to determine the path to the runscript"

    # Derive possible path from script invocation path
    path_to_script_directory=$(readlink -f $0 | sed "s|test_cases/$(basename $0)|scripts|g")
    # Check possible path
    if [[ ! -d ${path_to_script_directory} ]]
    then
      echo "Could not find path to the scripts directory."
      echo "Please read the instructions available both here and in the readme,"
      echo "and set path_to_run_script properly."
      exit
    fi

    echo "Attempting to use ${path_to_script_directory} as path_to_script_directory."
  fi
fi

if [[ ! -e ${path_to_script_directory}/run.sh ]]
then
  echo "Cannot find run.sh in ${path_to_script_directory}"
  echo "Is the path correct?"
  exit
fi

# Check PARFLOW_DIR
if [[ ${PARFLOW_DIR} != "PUT THE PROPER PARFLOW_DIR PATH HERE" ]] && [[ ${PARFLOW_DIR} != "" ]]
then
  # Check PARFLOW_DIR is a directory
  if [[ ! -d ${PARFLOW_DIR} ]]
  then
    echo "PARFLOW_DIR provided but either does not exist or is not a directory: ${PARFLOW_DIR}"
    exit
  fi
  # Upate path with this PARFLOW_DIR's bin, export both.
  PATH=${PARFLOW_DIR}/bin:${PATH}
  export PATH PARFLOW_DIR

# Check modules array
elif [[ ${#modules_array[@]} > 0 ]]
then
  # Load each module in order, checking exit status
  for load_module in ${modules_array[@]}
  do
    module load ${load_module}
    load_exit_code=$?
    # Check successful load
    if [[ ${load_exit_code} != 0 ]]
    then
      echo "Error loading module: ${load_module}"
      echo "Exit code ${load_exit_code}"
      exit
    fi
  done

# Neither method used. Warn, exit.
else
  echo "No method of setting up ParFlow environment was chosen."
  echo "Please read instructions and try again."
  exit
fi

# Sanity check environment
module list
which parflow

# Check for parflow on path
if [[ $(which parflow) == "" ]]
then
  echo "No parflow binary found on path."
  exit -1
fi

# Execute run script
cmd="${path_to_script_directory}/run.sh ${NP} ${NQ} ${NR} ${NX} ${NY} ${NZ} ${NT} ${test_name}"
echo "Running: ${size_string}"
echo ${cmd}
if [[ "${enable_debug}" != "true" ]]
then
  eval ${cmd}
fi
